#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tvseriesproject1.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="movies")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertmovie(movie instance);
    partial void Updatemovie(movie instance);
    partial void Deletemovie(movie instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["moviesConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<movie> movies
		{
			get
			{
				return this.GetTable<movie>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movies")]
	public partial class movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _namee;
		
		private string _genree;
		
		private string _directorr;
		
		private string _producerr;
		
		private string _available_onn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameeChanging(string value);
    partial void OnnameeChanged();
    partial void OngenreeChanging(string value);
    partial void OngenreeChanged();
    partial void OndirectorrChanging(string value);
    partial void OndirectorrChanged();
    partial void OnproducerrChanging(string value);
    partial void OnproducerrChanged();
    partial void Onavailable_onnChanging(string value);
    partial void Onavailable_onnChanged();
    #endregion
		
		public movie()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namee", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string namee
		{
			get
			{
				return this._namee;
			}
			set
			{
				if ((this._namee != value))
				{
					this.OnnameeChanging(value);
					this.SendPropertyChanging();
					this._namee = value;
					this.SendPropertyChanged("namee");
					this.OnnameeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genree", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string genree
		{
			get
			{
				return this._genree;
			}
			set
			{
				if ((this._genree != value))
				{
					this.OngenreeChanging(value);
					this.SendPropertyChanging();
					this._genree = value;
					this.SendPropertyChanged("genree");
					this.OngenreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_directorr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string directorr
		{
			get
			{
				return this._directorr;
			}
			set
			{
				if ((this._directorr != value))
				{
					this.OndirectorrChanging(value);
					this.SendPropertyChanging();
					this._directorr = value;
					this.SendPropertyChanged("directorr");
					this.OndirectorrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producerr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string producerr
		{
			get
			{
				return this._producerr;
			}
			set
			{
				if ((this._producerr != value))
				{
					this.OnproducerrChanging(value);
					this.SendPropertyChanging();
					this._producerr = value;
					this.SendPropertyChanged("producerr");
					this.OnproducerrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_available_onn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string available_onn
		{
			get
			{
				return this._available_onn;
			}
			set
			{
				if ((this._available_onn != value))
				{
					this.Onavailable_onnChanging(value);
					this.SendPropertyChanging();
					this._available_onn = value;
					this.SendPropertyChanged("available_onn");
					this.Onavailable_onnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
